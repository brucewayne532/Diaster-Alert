AdminPanel.java
import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;

import javax.swing.JFrame;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JPanel;
import javax.swing.JMenu;
import java.awt.Toolkit;


public class AdminPanel extends JFrame implements ActionListener {
   JMenuItem itmAddProduct;
   JMenu mnProduct;
   JMenuItem itmUpdateProduct;
   JMenuItem itmDeleteProduct;
   JMenu mnCashier ;
   JMenuItem itmDeleteCashier;
   JMenuItem itmAddCashier;
   JMenu mnStock ;
   JMenuItem itmShowStock;
   JMenu mnExport;
   ArrayList<JPanel> panels=new ArrayList<JPanel>();
   int cPanel=0;
   private JMenu mnSearch;
   private JMenuItem mntmSearchProduct;
   private JMenuItem mntmSearchCashier;
   private JMenu mnSale;
   private JMenuItem mntmPrintSale;


/**
    * Create the frame.
    */
public AdminPanel() {
      setIconImage(Toolkit.getDefaultToolkit().getImage("F:\\Working Directory\\fianl project with sql\\Bill\\logo.png"));
      setTitle("Admin Panel");
      setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
      setBounds(100, 100, 840, 619);

      JMenuBar menuBar = new JMenuBar();
      setJMenuBar(menuBar);

      mnProduct = new JMenu("Product");
      menuBar.add(mnProduct);

      itmAddProduct = new JMenuItem("Add Product");
      mnProduct.add(itmAddProduct);
      itmAddProduct.addActionListener(this);

      itmUpdateProduct = new JMenuItem("Update Product");
      mnProduct.add(itmUpdateProduct);
      itmUpdateProduct.addActionListener(this);

      itmDeleteProduct = new JMenuItem("Delete Product");
      mnProduct.add(itmDeleteProduct);
      itmDeleteProduct.addActionListener(this);

      mnCashier = new JMenu("Cashier");
      menuBar.add(mnCashier);

      itmAddCashier = new JMenuItem("Add Cashier");
      mnCashier.add(itmAddCashier);
      itmAddCashier.addActionListener(this);

      itmDeleteCashier = new JMenuItem("Delete Cashier");
      mnCashier.add(itmDeleteCashier);
      itmDeleteCashier.addActionListener(this);

      mnStock = new JMenu("Stock");
      menuBar.add(mnStock);

      itmShowStock = new JMenuItem("Show Stock");
      mnStock.add(itmShowStock);
      itmShowStock.addActionListener(this);

      mnSearch = new JMenu("Search");
      menuBar.add(mnSearch);

      mntmSearchProduct = new JMenuItem("Search Product");
      mnSearch.add(mntmSearchProduct);
      mntmSearchProduct.addActionListener(this);

      mntmSearchCashier = new JMenuItem("Search Cashier");
      mnSearch.add(mntmSearchCashier);

      mnSale = new JMenu("Sale");
      menuBar.add(mnSale);

      mntmPrintSale = new JMenuItem("Print Sale");
      mnSale.add(mntmPrintSale);
      mntmPrintSale.addActionListener(this);

      mnExport = new JMenu("Account");
      menuBar.add(mnExport);

      JMenuItem logout = new JMenuItem("Logout");
      mnExport.add(logout);
      logout.addActionListener(this);
      mntmSearchCashier.addActionListener(this);

      getContentPane().setLayout(new BorderLayout(0, 0));

      panels.add(new addProduct());
      panels.add(new updateProduct());
      panels.add(new deleteProduct());
      panels.add(new addCashier());
      panels.add(new deleteCashier());
      panels.add(new showStock());
      panels.add(new searchProduct());
      panels.add(new searchCashier());
      panels.add(new Sale());
      getContentPane().add(panels.get(0));

   }

   @Override
   public void actionPerformed(ActionEvent e) {
      // TODO Auto-generated method stub
System.out.println("Selected: " + e.getActionCommand());   
      if(e.getActionCommand().equals("Add Product"))
      {
         System.out.println(panels.get(cPanel));
         this.remove(panels.get(cPanel));
         this.revalidate();
         this.repaint();
         getContentPane().add(panels.get(0));
         this.setVisible(true);
         cPanel=0;
         this.setTitle("Add Product");
      }
      else if(e.getActionCommand().equals("Update Product"))
      {
this.remove(panels.get(cPanel));
         this.revalidate();
         this.repaint();
         getContentPane().add(panels.get(1));
         this.setVisible(true);
         cPanel=1;
         this.setTitle("Update Product");
      }
      else if(e.getActionCommand().equals("Delete Product"))
      {
         this.remove(panels.get(cPanel));
         this.revalidate();
         this.repaint();
         getContentPane().add(panels.get(2));
         this.setVisible(true);
         cPanel=2;
         this.setTitle("Delete Product");
      }
      else if(e.getActionCommand().equals("Add Cashier"))
      {
         this.remove(panels.get(cPanel));
         this.revalidate();
         this.repaint();
         getContentPane().add(panels.get(3));
         this.setVisible(true);
         cPanel=3;
         this.setTitle("Add Cashier");
      }
      else if(e.getActionCommand().equals("Delete Cashier"))
      {
         this.remove(panels.get(cPanel));
         this.revalidate();
         this.repaint();
         getContentPane().add(panels.get(4));
         this.setVisible(true);
         cPanel=4;
         this.setTitle("Delete Cashier");
      }
      else if(e.getActionCommand().equals("Show Stock"))
      {
         this.remove(panels.get(cPanel));
         getContentPane().add(panels.get(5));
         this.revalidate();
         this.repaint();
         this.setVisible(true);
         cPanel=5;
         this.setTitle("Show Stock");
      }
      else if(e.getActionCommand().equals("Search Product"))
      {
         this.remove(panels.get(cPanel));
         getContentPane().add(panels.get(6));
         this.revalidate();
         this.repaint();
         this.setVisible(true);
         cPanel=6;
         this.setTitle("Search Product");
      }
      else if(e.getActionCommand().equals("Search Cashier"))
      {
         this.remove(panels.get(cPanel));
         getContentPane().add(panels.get(7));
         this.revalidate();
         this.repaint();
         this.setVisible(true);
         cPanel=7;
         this.setTitle("Search Cashier");
      }
      else if(e.getActionCommand().equals("Print Sale"))
      {
         this.remove(panels.get(cPanel));
         getContentPane().add(panels.get(8));
         this.revalidate();
         this.repaint();
         this.setVisible(true);
         cPanel=8;
         this.setTitle("Print Sale");
      }
      else if(e.getActionCommand().equals("Logout"))
      {
         this.dispose();
      }
   }
}
addCashier.java
import java.awt.Font;

import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuItem;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.JPasswordField;
import java.awt.Color;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;

public class addCashier extends JPanel {

   JTextField userField;
   JButton btnAddCashier;
   private JPasswordField passwordField;
   private JLabel error;
   String err="Enter username and passowrd";
   String user,pass;
/**
    * Create the panel.
    */
public addCashier() {
      setLayout(null);
      setBounds(100, 100, 840, 619);
      JLabel lblAddCashier = new JLabel("ADD CASHIER");
      lblAddCashier.setBounds(328, 45, 182, 21);
      lblAddCashier.setFont(new Font("Tahoma", Font.PLAIN, 17));
      add(lblAddCashier);

      JLabel lblUserName = new JLabel("User name");
      lblUserName.setFont(new Font("Tahoma", Font.PLAIN, 14));
      lblUserName.setBounds(246, 104, 124, 21);
      add(lblUserName);

      JLabel lblPassword = new JLabel("Password");
      lblPassword.setFont(new Font("Tahoma", Font.PLAIN, 14));
      lblPassword.setBounds(246, 136, 124, 21);
      add(lblPassword);

      userField = new JTextField();
      userField.setBounds(436, 106, 147, 20);
      add(userField);
      userField.setColumns(10);

      btnAddCashier = new JButton("Add Cashier");
      btnAddCashier.addActionListener(new ActionListener() {
         public void actionPerformed(ActionEvent e) {
            user=userField.getText().trim();
            pass=passwordField.getText().toString().trim().toLowerCase();
            if(user.equals("")||pass.equals(""))
               error.setText(err);
            else
            {
               error.setText("");
               DB.addCashier(user,pass);
               userField.setText("");
               passwordField.setText("");
            }
         }
      });
      btnAddCashier.setBounds(436, 194, 147, 23);
      add(btnAddCashier);

      passwordField = new JPasswordField();
      passwordField.setBounds(436, 138, 147, 19);
      add(passwordField);

      error = new JLabel("");
      error.setForeground(Color.RED);
      error.setBounds(328, 241, 201, 14);
      add(error);

   }

}
addProduct.java
import java.awt.Font;

import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuItem;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.JComboBox;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import java.awt.Color;

public class addProduct extends JPanel {

   JTextField idField;
   JTextArea descField;
    JTextField quanField;
    JLabel error;
   JComboBox<String> company;
   String id,detail,comp;
   int quan;
   String err="Enter product id and quantity";
/**
    * Create the panel.
    */
public addProduct() {
      setLayout(null);
      setBounds(100, 100, 840, 619);
      JLabel lblAddProduct = new JLabel("ADD PRODUCT");
      lblAddProduct.setBounds(328, 45, 115, 21);
      lblAddProduct.setFont(new Font("Tahoma", Font.PLAIN, 17));
      add(lblAddProduct);

      JLabel lblProductName = new JLabel("Product ID");
      lblProductName.setFont(new Font("Tahoma", Font.PLAIN, 14));
      lblProductName.setBounds(246, 136, 124, 21);
      add(lblProductName);

      JLabel lblProductDescription = new JLabel("Product Details\r\n");
      lblProductDescription.setFont(new Font("Tahoma", Font.PLAIN, 14));
      lblProductDescription.setBounds(246, 168, 139, 21);
      add(lblProductDescription);

      idField = new JTextField();
      idField.setBounds(449, 137, 136, 20);
      add(idField);
      idField.setColumns(10);

      descField = new JTextArea();
      descField.setBounds(449, 168, 136, 58);
      add(descField);
      JScrollPane scroll = new JScrollPane(descField);
      scroll.setBounds(449, 168, 136, 58);
      add(scroll);

      JLabel lblCompany = new JLabel("Company");
      lblCompany.setFont(new Font("Tahoma", Font.PLAIN, 14));
      lblCompany.setBounds(246, 241, 124, 21);
      add(lblCompany);

      JButton btnAddProduct = new JButton("Add Product");
      btnAddProduct.addActionListener(new ActionListener() {
         public void actionPerformed(ActionEvent arg0) {
            if(quanField.getText().equals("")||idField.getText().equals(""))
            {
               error.setText(err);
            }
            else
            {
               error.setText("");
               id=idField.getText().trim();
               quan=Integer.parseInt(quanField.getText().trim());
               detail=descField.getText().trim();
               comp=company.getSelectedItem().toString();
               DB.addProductToDB(id, detail, comp, quan);
               idField.setText("");
               quanField.setText("");
               descField.setText("");
            }
         }
      });
      btnAddProduct.setBounds(449, 334, 136, 23);
      add(btnAddProduct);

      quanField = new JTextField();
      quanField.setColumns(10);
      quanField.setBounds(449, 274, 136, 20);
      add(quanField);

      JLabel lblQuantity = new JLabel("Items available");
      lblQuantity.setFont(new Font("Tahoma", Font.PLAIN, 14));
      lblQuantity.setBounds(246, 273, 124, 21);
      add(lblQuantity);

      company = new JComboBox<String>();
      company.setBounds(449, 243, 136, 20);
      add(company);

      error = new JLabel("");
      error.setForeground(Color.RED);
      error.setBounds(339, 92, 265, 14);
      add(error);
      company.addItem("General");
      company.addItem("Mats & Rugs");
      company.addItem("N/S & Electric");

   }
}
DB.java
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;

import javax.swing.JOptionPane;

public class DB {

   public static Connection DBConnection()
   {
      Connection conn = null;
      try
      {
         Class.forName("com.mysql.jdbc.Driver");

         conn = DriverManager.getConnection("jdbc:mysql://localhost/caddey","root", "");
         System.out.print("Database is connected !");

      }
      catch(Exception e)
      {
         JOptionPane.showMessageDialog(null, "Do not connect to DB - Error:"+e);

      }
      return conn;
   }
   public static void addProductToDB(String id,String detail,String comp,int quan)
   {
      Connection conn=DBConnection();
      try {
         Statement statement = conn.createStatement();
         statement.executeUpdate("INSERT INTO stock VALUES ('"+id+"','"+detail+"','"+comp+"',"+quan+");");
         JOptionPane.showMessageDialog(null, "Product added to database");
         conn.close();
      } catch (SQLException e) {
         // TODO Auto-generated catch block
JOptionPane.showMessageDialog(null, e.getMessage());
         e.printStackTrace();
      }
   }
   public static void updateProductToDB(String id,String detail,String comp,int quan)
   {
      Connection conn=DBConnection();
      try {
         Statement statement = conn.createStatement();
         int status=statement.executeUpdate("UPDATE stock set Detail = '"+detail+"', Company = '"+comp+"', Quantity = "+quan+" WHERE ProductID = '"+id+"';");
         if(status==1)
             JOptionPane.showMessageDialog(null,  "Product updted");
          else
             JOptionPane.showMessageDialog(null,  "ProductID not found!");
         conn.close();
      } catch (SQLException e) {
         // TODO Auto-generated catch block
JOptionPane.showMessageDialog(null, e.getMessage());
         e.printStackTrace();
      }

   }

   public static void deleteProductToDB(String id)
   {
      Connection conn=DBConnection();
      try {
         Statement statement = conn.createStatement();
         int status=statement.executeUpdate("DELETE from stock WHERE ProductID = '"+id+"';");
          if(status==1)
JOptionPane.showMessageDialog(null,  "Product deleted");
          else
             JOptionPane.showMessageDialog(null,  "ProductID not found!");
         conn.close();
      } catch (SQLException e) {
         // TODO Auto-generated catch block
JOptionPane.showMessageDialog(null, e.getMessage());
         e.printStackTrace();
      }

   }
   public static void searchProduct(String id)
   {
      Connection conn=DBConnection();
      try {
         Statement statement = conn.createStatement();
         ResultSet rs = statement.executeQuery("Select * from stock WHERE ProductID = '"+id+"';");
         if (!rs.next()) 
            JOptionPane.showMessageDialog(null,"No product found with this id!");
         else
            JOptionPane.showMessageDialog(null, "ProductID: "+id+"\nQuantity: "+rs.getString("Quantity"));

         conn.close();
      } catch (SQLException e) {
         // TODO Auto-generated catch block
JOptionPane.showMessageDialog(null, e.getMessage());
         e.printStackTrace();
      }
   }
   public static void searchCashier(String email)
   {
      Connection conn=DBConnection();
      try {
         Statement statement = conn.createStatement();
         ResultSet rs = statement.executeQuery("Select * from users WHERE Email = '"+email+"';");
         if (!rs.next()) 
            JOptionPane.showMessageDialog(null,"No cashier found with this email!");
         else
            JOptionPane.showMessageDialog(null, "Email: "+email+"\nPassword: "+rs.getString("Password"));

         conn.close();
      } catch (SQLException e) {
         // TODO Auto-generated catch block
JOptionPane.showMessageDialog(null, e.getMessage());
         e.printStackTrace();
      }
   }
   public static boolean varifyLogin(String email,String pass)
   {
      boolean login=false;
      Connection conn=DBConnection();
      try {
         Statement statement = conn.createStatement();
         ResultSet rs = statement.executeQuery("Select * from users WHERE Email = '"+email+"' and Password = '"+pass+"';");
         if (!rs.next()) 
            login=false;
         else
            login=true;

         conn.close();
      } catch (SQLException e) {
         // TODO Auto-generated catch block
JOptionPane.showMessageDialog(null, e.getMessage());
         e.printStackTrace();
      }
      return login;
   }
   public static void addCashier(String user,String pass)
   {
      Connection conn=DBConnection();
      try {
         Statement statement = conn.createStatement();
         statement.executeUpdate("INSERT INTO users VALUES ('"+user+"','"+pass+"');");
         JOptionPane.showMessageDialog(null, "Cashier added to database");
         conn.close();
      } catch (SQLException e) {
         // TODO Auto-generated catch block
JOptionPane.showMessageDialog(null, e.getMessage());
         e.printStackTrace();
      }
   }
   public static void deleteCashier(String user,String pass)
   {
      Connection conn=DBConnection();
      try {
         Statement statement = conn.createStatement();
         int status=statement.executeUpdate("DELETE from users WHERE Email = '"+user+"' AND Password = '"+pass+"';");
          if(status==1)
                JOptionPane.showMessageDialog(null,  "Cashier deleted");
             else
                JOptionPane.showMessageDialog(null,  "Cashier not found!");
         conn.close();
      } catch (SQLException e) {
         // TODO Auto-generated catch block
JOptionPane.showMessageDialog(null, e.getMessage());
         e.printStackTrace();
      }
   }

   public static String searchPDetail(String id,int q)
   {
      Connection conn=DBConnection();
      String rt="";
      try {
         int quan;
         Statement statement = conn.createStatement();
         ResultSet rs = statement.executeQuery("Select * from stock WHERE ProductID = '"+id+"';");
         if (!rs.next()) 
            rt="nill";
         else{
            quan=Integer.parseInt(rs.getString("Quantity"))-q;
            if(quan<0)
               rt="item is out of stock";
            else
            {
               rt=rs.getString("Detail")+"%"+rs.getString("Company");
               statement.executeUpdate("UPDATE stock set Quantity = "+quan+" WHERE ProductID = '"+id+"';");
            }

         }

         conn.close();
      } catch (SQLException e) {
         // TODO Auto-generated catch block
JOptionPane.showMessageDialog(null, e.getMessage());
         e.printStackTrace();
      }
      return rt;
   }
   public static void addSaleToDB(Object data[],ArrayList<String> comp,String name)
   {
      Connection conn=DBConnection();
      DateFormat dateFormat = new SimpleDateFormat("yyyy/MM/dd");
      Date date = new Date();
      String d=dateFormat.format(date); 
      try {
         Statement statement = conn.createStatement();
         for(int x=0;x<data.length;x=x+5)
         {
            statement.executeUpdate("INSERT INTO sale VALUES ('"+data[x]+"','"+comp.get(0)+"','"+d+"','"+data[x+3]+"',"+data[x+4]+",'"+name+"');");
            comp.remove(0);
         }
         conn.close();
      } catch (SQLException e) {
         // TODO Auto-generated catch block
JOptionPane.showMessageDialog(null, e.getMessage());
         e.printStackTrace();
      }
   }
   public static ArrayList<String> getSale(String date,String comp)
   {
      String q;
      ArrayList<String> r=new ArrayList<String>();

      if(comp.equals("All"))
         q="Select * from sale WHERE Date = '"+date+"';";
      else
         q="Select * from sale WHERE Date = '"+date+"' AND Company = '"+comp+"';";
      Connection conn=DBConnection();
      try {
         Statement statement = conn.createStatement();
         ResultSet rs = statement.executeQuery(q);
         while(rs.next())
         {
            r.add(rs.getString("Date"));
            r.add(rs.getString("ProductID"));
            r.add(rs.getString("Company"));
            r.add(rs.getString("Payment"));
         }
         conn.close();
      } catch (SQLException e) {
         // TODO Auto-generated catch block
JOptionPane.showMessageDialog(null, e.getMessage());
         e.printStackTrace();
      }
      return r;
   }

   public static ArrayList<String> showStock(String comp)
   {
      String q;
      ArrayList<String> r=new ArrayList<String>();
      if(comp.equals("All")) 
         q="Select * from stock;";
      else
         q="Select * from stock WHERE Company = '"+comp+"';";
      Connection conn=DBConnection();
      try {
         Statement statement = conn.createStatement();
         ResultSet rs = statement.executeQuery(q);
         while(rs.next())
         {
            r.add(rs.getString("ProductID"));
            r.add(rs.getString("Detail"));
            r.add(rs.getString("Company"));
            r.add(rs.getString("Quantity"));
         }
         conn.close();
      } catch (SQLException e) {
         // TODO Auto-generated catch block
JOptionPane.showMessageDialog(null, e.getMessage());
         e.printStackTrace();
      }
      return r;
   }

   public static String getPDetail(String id,int q)
   {
      Connection conn=DBConnection();
      String rt="";
      try {
         int quan;
         Statement statement = conn.createStatement();
         ResultSet rs = statement.executeQuery("Select * from stock WHERE ProductID = '"+id+"';");
         if (!rs.next()) 
            rt="nill";
         else{
            quan=Integer.parseInt(rs.getString("Quantity"))-q;
            if(quan<0)
               rt="item is out of stock";
            else
            {
               rt=rs.getString("Detail")+"%"+rs.getString("Company");
               statement.executeUpdate("UPDATE stock set Quantity = "+quan+" WHERE ProductID = '"+id+"';");
            }

         }

         conn.close();
      } catch (SQLException e) {
         // TODO Auto-generated catch block
JOptionPane.showMessageDialog(null, e.getMessage());
         e.printStackTrace();
      }
      return rt;
   }

   public static ArrayList<String> searchP(String id)
   {
      Connection conn=DBConnection();
      ArrayList<String> data=new ArrayList<String>();
      try {
         Statement statement = conn.createStatement();
         ResultSet rs = statement.executeQuery("Select * from stock WHERE ProductID = '"+id+"';");
         if (rs.next()) 
         {
            data.add(rs.getString("Detail"));
            data.add(rs.getString("Company"));
            data.add(rs.getString("Quantity"));
         }

         conn.close();
      } catch (SQLException e) {
         // TODO Auto-generated catch block
JOptionPane.showMessageDialog(null, e.getMessage());
         e.printStackTrace();
      }
      return data;
   }

   public static void updateProduct(String id,int quan)
   {
      Connection conn=DBConnection();
      try {
         Statement statement = conn.createStatement();
         ResultSet rs = statement.executeQuery("Select * from stock WHERE ProductID = '"+id+"';");
         int q=0;
         if(rs.next())
         {
            q=Integer.parseInt(rs.getString("Quantity"))+quan;
            statement.executeUpdate("UPDATE stock set Quantity = "+q+" WHERE ProductID = '"+id+"';");

         }
         conn.close();
      } catch (SQLException e) {
         // TODO Auto-generated catch block
JOptionPane.showMessageDialog(null, e.getMessage());
         e.printStackTrace();
      }

   }
   public static void main(String args[])
   {

   }
}
deleteCashier.java
import java.awt.Font;

import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuItem;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.JPasswordField;
import java.awt.Color;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;

public class deleteCashier extends JPanel {

   JTextField userField;
   JButton btnDeleteCashier;
   private JPasswordField passwordField;
   private JLabel error;
   String user,pass,err="Enter username and password";
/**
    * Create the panel.
    */
public deleteCashier() {
      setLayout(null);
      setBounds(100, 100, 840, 619);
      JLabel lblDeleteCashier = new JLabel("DELETE CASHIER");
      lblDeleteCashier.setBounds(328, 45, 182, 21);
      lblDeleteCashier.setFont(new Font("Tahoma", Font.PLAIN, 17));
      add(lblDeleteCashier);

      JLabel lblUserName = new JLabel("User name");
      lblUserName.setFont(new Font("Tahoma", Font.PLAIN, 14));
      lblUserName.setBounds(246, 104, 124, 21);
      add(lblUserName);

      JLabel lblPassword = new JLabel("Password");
      lblPassword.setFont(new Font("Tahoma", Font.PLAIN, 14));
      lblPassword.setBounds(246, 136, 124, 21);
      add(lblPassword);

      userField = new JTextField();
      userField.setBounds(449, 106, 136, 20);
      add(userField);
      userField.setColumns(10);

      btnDeleteCashier = new JButton("Delete Cashier");
      btnDeleteCashier.addActionListener(new ActionListener() {
         public void actionPerformed(ActionEvent e) {
            user=userField.getText().trim();
            pass=passwordField.getText().trim().toLowerCase();
            if(user.equals("")||pass.equals(""))
               error.setText(err);
            else
            {
               error.setText("");
               DB.deleteCashier(user,pass);
               userField.setText("");
               passwordField.setText("");
            }
         }
      });
      btnDeleteCashier.setBounds(449, 194, 136, 23);
      add(btnDeleteCashier);

      passwordField = new JPasswordField();
      passwordField.setBounds(449, 138, 136, 19);
      add(passwordField);

      error = new JLabel("");
      error.setForeground(Color.RED);
      error.setBounds(277, 247, 248, 14);
      add(error);

   }

}
deleteProduct.java
import java.awt.Font;

import javax.swing.JButton;
import javax.swing.JLabel;

import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import java.awt.Color;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;

public class deleteProduct extends JPanel {

   JTextField idField;
   JButton btnDeleteProduct;
   private JLabel error;
   String id,err="Enter product id!";
/**
    * Create the panel.
    */
public deleteProduct() {
      setLayout(null);
      setBounds(100, 100, 840, 619);
      JLabel lblUpdateProduct = new JLabel("DELETE PRODUCT");
      lblUpdateProduct.setBounds(319, 84, 182, 21);
      lblUpdateProduct.setFont(new Font("Tahoma", Font.PLAIN, 17));
      add(lblUpdateProduct);

      JLabel lblProductName = new JLabel("Product ID");
      lblProductName.setFont(new Font("Tahoma", Font.PLAIN, 14));
      lblProductName.setBounds(253, 156, 124, 21);
      add(lblProductName);

      idField = new JTextField();
      idField.setBounds(449, 158, 136, 20);
      add(idField);
      idField.setColumns(10);

      btnDeleteProduct = new JButton("Delete Product");
      btnDeleteProduct.addActionListener(new ActionListener() {
         public void actionPerformed(ActionEvent e) {

            if(idField.getText().equals(""))
            {
               error.setText(err);
            }
            else
            {
               error.setText("");
               id=idField.getText().trim();
               DB.deleteProductToDB(id);
               idField.setText("");
            }
         }
      });
      btnDeleteProduct.setBounds(449, 219, 136, 23);
      add(btnDeleteProduct);

      error = new JLabel("");
      error.setForeground(Color.RED);
      error.setBounds(349, 277, 217, 14);
      add(error);

   }

}
generateInvoice.java


import java.awt.BorderLayout;
import java.awt.EventQueue;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;

import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.border.EmptyBorder;
import javax.swing.JMenu;
import javax.swing.JMenuItem;
import javax.swing.JMenuBar;
import java.awt.Toolkit;

public class generateInvoice extends JFrame implements ActionListener{

   private JPanel contentPane;
   int jp;
   ArrayList<JPanel> panels=new ArrayList<JPanel>();

/**
    * Launch the application.
    */
public static void main(String[] args) {
      EventQueue.invokeLater(new Runnable() {
         public void run() {
            try {
               generateInvoice frame = new generateInvoice();
               frame.setVisible(true);
            } catch (Exception e) {
               e.printStackTrace();
            }
         }
      });
   }

/**
    * Create the frame.
    */
public generateInvoice() {
      setIconImage(Toolkit.getDefaultToolkit().getImage("F:\\Working Directory\\fianl project with sql\\Bill\\logo.png"));
      setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
      setBounds(100, 100, 850,600);

      JMenuBar menuBar = new JMenuBar();
      setJMenuBar(menuBar);

      JMenu mnNewMenu = new JMenu("File");
      menuBar.add(mnNewMenu);

      JMenuItem mntmGenerateInvoice = new JMenuItem("Generate Invoice");
      mnNewMenu.add(mntmGenerateInvoice);
      mntmGenerateInvoice.addActionListener(this);

      JMenuItem mntmSearch = new JMenuItem("Search Product");
      mnNewMenu.add(mntmSearch);
      mntmSearch.addActionListener(this);

      JMenuItem mntmLogout = new JMenuItem("Logout");
      mnNewMenu.add(mntmLogout);
      mntmLogout.addActionListener(this);

      contentPane = new JPanel();
      contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));
      setContentPane(contentPane);
      contentPane.setLayout(new BorderLayout(0, 0));
      searchProduct sp=new searchProduct();

      panels.add(new Invoice());
      panels.add(new searchProduct());
      getContentPane().add(panels.get(0));
      jp=0;
      this.setTitle("Generate Invoice");
   }

   @Override
   public void actionPerformed(ActionEvent e) {
      // TODO Auto-generated method stub
if(e.getActionCommand().equals("Search Product"))
      {
         this.remove(panels.get(jp));
         this.revalidate();
         this.repaint();
         getContentPane().add(panels.get(1));
         jp=1;
         this.setVisible(true);
         this.setTitle("Search Product");

      }
      else if(e.getActionCommand().equals("Generate Invoice"))
      {
         this.remove(panels.get(jp));
         this.revalidate();
         this.repaint();
         getContentPane().add(panels.get(0));
         this.setVisible(true);
         jp=0;
         this.setTitle("Generate Invoice");
      }

      else if(e.getActionCommand().equals("Logout"))
      {
         this.dispose();
      }
   }
}
Invoice.java



import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JLabel;
import java.awt.Font;
import javax.swing.JComboBox;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;
import javax.swing.JButton;
import javax.swing.JTable;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.util.ArrayList;
import java.awt.event.ActionEvent;
import java.awt.Color;

public class Invoice extends JPanel {
   private JTextField name;
   private JTextField pID;
   private JTextField pQuan;
   private JTable items;
   private JTextField UnitPrice;
   JLabel lblName;
   JLabel error ;
   static int invo=1;
   DefaultTableModel dtm;
   Object data[];
   JComboBox<String> cType;
   ArrayList<String> comp=new ArrayList<String>();
   private JTextField dField;
   long total=0;
   JLabel gtotal ;

/**
    * Create the panel.
    */
public Invoice() {
      setLayout(null);

      JLabel lblCustomer = new JLabel("Customer");
      lblCustomer.setFont(new Font("Tahoma", Font.PLAIN, 14));
      lblCustomer.setBounds(88, 59, 97, 23);
      add(lblCustomer);

      cType = new JComboBox<String>();
      cType.setBounds(201, 62, 89, 20);
      add(cType);
      cType.addItem("Walk-in customer");
      cType.addItem("Company/customer name");
      cType.setSelectedIndex(1);
      cType.addItemListener(new ItemListener() {

         @Override
         public void itemStateChanged(ItemEvent arg0) {
            // TODO Auto-generated method stub
if(cType.getSelectedIndex()==1)
            {
               lblName.setVisible(true);
               name.setVisible(true);
            }
            else
            {
               lblName.setVisible(false);
               name.setVisible(false);
            }
         }
      });
      lblName = new JLabel("Name");
      lblName.setFont(new Font("Tahoma", Font.PLAIN, 14));
      lblName.setBounds(364, 59, 64, 23);
      add(lblName);

      name = new JTextField();
      name.setBounds(438, 62, 150, 20);
      add(name);
      name.setColumns(10);

      JLabel lblProductId = new JLabel("Product ID");
      lblProductId.setFont(new Font("Tahoma", Font.PLAIN, 14));
      lblProductId.setBounds(88, 383, 80, 23);
      add(lblProductId);

      JLabel lblQuantity = new JLabel("Quantity");
      lblQuantity.setFont(new Font("Tahoma", Font.PLAIN, 14));
      lblQuantity.setBounds(88, 174, 97, 23);
      add(lblQuantity);

      pID = new JTextField();
      pID.setBounds(201, 133, 89, 20);
      add(pID);
      pID.setColumns(10);

      pQuan = new JTextField();
      pQuan.setColumns(10);
      pQuan.setBounds(201, 177, 89, 20);
      add(pQuan);

      JButton btnAdd = new JButton("Add");
      btnAdd.addActionListener(new ActionListener() {
         public void actionPerformed(ActionEvent arg0) {
            if(UnitPrice.getText().equals("")||pQuan.getText().equals("")||pID.getText().equals(""))
            {
               error.setText("Enter required data");
               return;
            }
            else
               error.setText("");

            long up,fp,q;
            String id,detail="";
            up=Long.parseLong(UnitPrice.getText().trim());
            q=Long.parseLong(pQuan.getText().trim());
            id=pID.getText().trim();
            UnitPrice.setText("");
            pQuan.setText("");
            pID.setText("");
            fp=(up*q);
            detail=DB.searchPDetail(id,(int)q);
            String str[]=detail.split("%");
            detail=str[0];
            if(detail.equals("nill"))
            {
               error.setText("Invalid product id!");
               return;
            }
            else if(detail.equals("item is out of stock"))
            {
               error.setText(detail);
               return;
            }
            else
            {
               error.setText("");
               comp.add(str[1]);
            }
            dtm.addRow(new Object[]{id,detail,up,q,fp});
            total+=fp;
            gtotal.setText(total+"");

         }
      });
      btnAdd.setBounds(201, 265, 89, 23);
      add(btnAdd);

      String [] header={"Product ID","Item Details","Unit Price","Quantity","Final Price"};
      dtm= new DefaultTableModel(header, 0);  
      items = new JTable(dtm);
      items.setBounds(361, 135, 316, 298);
      //add(items);
      JScrollPane s=new JScrollPane(items);
      s.setEnabled(false);
      s.setBounds(361, 135, 392, 265);
      add(s);

      UnitPrice = new JTextField();
      UnitPrice.setColumns(10);
      UnitPrice.setBounds(201, 220, 89, 20);
      add(UnitPrice);

      JLabel lblUnitPrice = new JLabel("Unit Price");
      lblUnitPrice.setFont(new Font("Tahoma", Font.PLAIN, 14));
      lblUnitPrice.setBounds(88, 217, 97, 23);
      add(lblUnitPrice);

      JButton btnPrint = new JButton("PRINT");
      btnPrint.addActionListener(new ActionListener() {
         public void actionPerformed(ActionEvent arg0) {
            int x=0;
            String n="";
            if(cType.getSelectedIndex()==1)
               n=name.getText().trim();
            data=new Object[dtm.getColumnCount()*dtm.getRowCount()];
            for(int row=0;row<dtm.getRowCount();row++)
            {
               for(int col=0;col<dtm.getColumnCount();col++)
               {
                  data[x]=items.getValueAt(row, col);
                  x++;
               }
            }
         pdfGenerator.makePdf(data,total,invo);
invo++;
         DB.addSaleToDB(data,comp,n);
         }
      });
      btnPrint.setBounds(664, 411, 89, 52);
      add(btnPrint);

      error = new JLabel("");
error.setForeground(Color.RED);
      error.setBounds(92, 319, 218, 14);
      add(error);

      JLabel lblDeleteProduct = new JLabel("DELETE PRODUCT");
      lblDeleteProduct.setFont(new Font("Tahoma", Font.PLAIN, 14));
      lblDeleteProduct.setBounds(88, 344, 132, 14);
      add(lblDeleteProduct);

      JLabel label = new JLabel("Product ID");
      label.setFont(new Font("Tahoma", Font.PLAIN, 14));
      label.setBounds(88, 135, 80, 23);
      add(label);

      dField = new JTextField();
      dField.setColumns(10);
      dField.setBounds(201, 386, 89, 20);
      add(dField);

      JButton delbutton = new JButton("Delete");
      delbutton.addActionListener(new ActionListener() {
         public void actionPerformed(ActionEvent arg0) {
            String df=dField.getText().trim();
            for(int row=0;row<dtm.getRowCount();row++)
            {
                  if(items.getValueAt(row, 0).equals(df))
                  {
                     long q=(long)items.getValueAt(row, 3);
                     String i=(String)items.getValueAt(row, 1);
                     DB.updateProduct(i,(int) q);
                     total-=(long)items.getValueAt(row, 4);
dtm.removeRow(row);
                     gtotal.setText(total+"");
                     dField.setText("");
                     break;
                  }
            }
         }
      });
      delbutton.setBounds(201, 440, 89, 23);
      add(delbutton);

      JLabel lblGrandTotal = new JLabel("Grand total");
      lblGrandTotal.setFont(new Font("Tahoma", Font.BOLD, 15));
      lblGrandTotal.setBounds(364, 449, 89, 14);
      add(lblGrandTotal);

      gtotal = new JLabel("");
      gtotal.setFont(new Font("Tahoma", Font.BOLD, 15));
      gtotal.setBounds(470, 449, 132, 14);
      add(gtotal);

   //dtm.addRow(new Object[]{"Product ID","Item Details","Unit Price","Quantity","Final Price"});


   }
}
Login.java
import java.awt.BorderLayout;
import java.awt.EventQueue;

import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.border.EmptyBorder;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import java.awt.Font;
import javax.swing.JPasswordField;
import javax.swing.JButton;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.net.InetAddress;
import java.net.NetworkInterface;
import java.net.SocketException;
import java.net.UnknownHostException;
import java.awt.event.ActionEvent;
import java.awt.Color;
import javax.swing.ImageIcon;
import java.awt.Toolkit;

public class Login extends JFrame {

   private JPanel contentPane;
   private JTextField usernameField;
   private JPasswordField passwordField;
   private String password,username;
   private JLabel error;
   private String errorText="Invalid user name or password!";
   private JLabel lblCaddeyLogin;
   JButton btnLogin;
   private JLabel label;

/**
    * Launch the application.
    */
public static void main(String[] args) {
//    if(!getMac().equals("90-48-9A-AC-21-17"))
   // {
      // JOptionPane.showMessageDialog(null,"Unknown Computer, Can not run!");
         //return;
//    }
      EventQueue.invokeLater(new Runnable() {
         public void run() {
            try {
//             Process process = Runtime.getRuntime().exec("E:\\xampp\\apache_start.bat");
   //          Process process2 = Runtime.getRuntime().exec("E:\\xampp\\mysql_start.bat");

               Login frame = new Login();
               frame.setIconImage(Toolkit.getDefaultToolkit().getImage("F:\\Working Directory\\fianl project with sql\\Bill\\logo.png"));
               frame.setVisible(true);

            } catch (Exception e) {
               e.printStackTrace();
            }
         }
      });
   }

/**
    * Create the frame.
    */
public Login()
   {
      //setIconImage(Toolkit.getDefaultToolkit().getImage(System.getProperty("user.dir")+"/logo.png"));
      GUI();
   }
   void GUI()
   {
      setTitle("Login");
      setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
      setBounds(100, 100, 531, 387);
      contentPane = new JPanel();
      contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));
      setContentPane(contentPane);
      contentPane.setLayout(null);


      JLabel lblUserName = new JLabel("User name");
      lblUserName.setFont(new Font("Tahoma", Font.PLAIN, 14));
      lblUserName.setBounds(154, 141, 91, 14);
      contentPane.add(lblUserName);

      usernameField = new JTextField();
      usernameField.setBounds(282, 140, 129, 20);
      contentPane.add(usernameField);
      usernameField.setColumns(10);

      JLabel lblPassword = new JLabel("Password\r\n");
      lblPassword.setFont(new Font("Tahoma", Font.PLAIN, 14));
      lblPassword.setBounds(154, 174, 91, 14);
      contentPane.add(lblPassword);

      passwordField = new JPasswordField();
      passwordField.setBounds(282, 173, 129, 20);
      contentPane.add(passwordField);

      passwordField.addActionListener(new ActionListener() {

         @Override
         public void actionPerformed(ActionEvent e) {
               btnLogin.doClick();
            }
      });

      btnLogin = new JButton("Login");

      btnLogin.addActionListener(new ActionListener() {
         public void actionPerformed(ActionEvent arg0) {
            password=passwordField.getText().toString().toLowerCase();
            username=usernameField.getText().toString().toLowerCase();
            passwordField.setText("");
            usernameField.setText("");
if(password.equals("")||username.equals(""))
               error.setText(errorText);
            else
            {
               error.setText("");
               if(username.equals("admin"))
               {
                  if(DB.varifyLogin(username,password))
                     {
                        error.setText("");
                        AdminPanel p=new AdminPanel();
                        p.setVisible(true);
                     }
                  else
                     error.setText(errorText);
               }
               else
               {
                  if(DB.varifyLogin(username,password))
                  {
                     error.setText("");
                     generateInvoice g=new generateInvoice();
                     g.setVisible(true);
                  }
               else
                  error.setText(errorText);
               }

            }
         }
      });
      btnLogin.setBounds(282, 227, 89, 23);
      contentPane.add(btnLogin);

      error = new JLabel("");
error.setForeground(Color.RED);
      error.setBounds(104, 236, 220, 14);
      contentPane.add(error);

      lblCaddeyLogin = new JLabel("Caddey Login");
      lblCaddeyLogin.setFont(new Font("Tahoma", Font.PLAIN, 17));
      lblCaddeyLogin.setBounds(204, 26, 167, 28);
      contentPane.add(lblCaddeyLogin);

      label = new JLabel("");
      label.setIcon(new ImageIcon("E:\\XAMPP\\htdocs\\logo.png"));
      label.setBounds(10, 11, 167, 91);
      contentPane.add(label);


   }
   public static String getMac()
   {
      InetAddress ip;
      String mc="";
      try {
         ip = InetAddress.getLocalHost();
         NetworkInterface network = NetworkInterface.getByInetAddress(ip);

         byte[] mac = network.getHardwareAddress();

         StringBuilder sb = new StringBuilder();
         for (int i = 0; i < mac.length; i++) {
            sb.append(String.format("%02X%s", mac[i], (i < mac.length - 1) ? "-" : ""));
         }

         mc= sb.toString();

      } catch (UnknownHostException e) {
         // TODO Auto-generated catch block
e.printStackTrace();
      } catch (SocketException e) {
         // TODO Auto-generated catch block
e.printStackTrace();
      }
      return mc;


   }

}
pdfGenerator.java
import java.awt.Desktop;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.net.MalformedURLException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;


import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Element;
import com.itextpdf.text.Font;
import com.itextpdf.text.Image;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.Rectangle;
import com.itextpdf.text.pdf.ColumnText;
import com.itextpdf.text.pdf.PdfContentByte;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import com.itextpdf.tool.xml.html.table.Table;

public class pdfGenerator {

   public static void makePdf(Object[] data,long total,int inv)
   {
      String invoice="_invoice_.pdf";
      DateFormat dateFormat = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss");
      Date date = new Date();
      System.out.println(dateFormat.format(date)); //2016/11/16 12:08:43
      Document document = new Document();

            PdfWriter writer;

            try {
               writer = PdfWriter.getInstance(document, new FileOutputStream(invoice));


            document.open();
            Font f1 = new Font(Font.FontFamily.UNDEFINED, 18, Font.BOLD);
           Paragraph p1= new Paragraph("CADDEY STORE",f1);

           Paragraph p2= new Paragraph("Main Market Gulberg II Lahore");
           Paragraph p3= new Paragraph("042-35712296\n\n\n");
           Paragraph p4= new Paragraph("\n\nGrand Total: "+total,f1);
           Paragraph p5= new Paragraph("\nThank you for visiting us�!!\nReturn/Exchange not possible with-out bill.");

            p1.setAlignment(Element.ALIGN_CENTER);
            p3.setAlignment(Element.ALIGN_CENTER);
            p2.setAlignment(Element.ALIGN_CENTER);
            document.add(p1);
            document.add(p2);
            document.add(p3);
            Font f2 = new Font(Font.FontFamily.UNDEFINED, 8, Font.NORMAL);
            Phrase phrase = new Phrase("Time/Date: "+dateFormat.format(date), f2);
            PdfContentByte canvas = writer.getDirectContent();
            ColumnText.showTextAligned(canvas, Element.ALIGN_LEFT, phrase, 40, 740, 0);
            Phrase invNo = new Phrase("Invoice No. "+inv, f2);
            PdfContentByte canv = writer.getDirectContent();
            ColumnText.showTextAligned(canv, Element.ALIGN_LEFT, invNo, 510, 785, 0);
            Image image;
         try {
              image = Image.getInstance("E:\\XAMPP\\htdocs\\logo.png");
                image.setAbsolutePosition(10f, 730f);
                document.add(image);

         } catch (MalformedURLException e) {
            // TODO Auto-generated catch block
e.printStackTrace();
         } catch (IOException e) {
            // TODO Auto-generated catch block
e.printStackTrace();
         }

          PdfPTable table = new PdfPTable(5);
          float[] columnWidths = new float[] {15f, 30f, 10f, 10f,15f};
          table.setWidths(columnWidths);
          table.addCell("Product ID");

          table.addCell("Item Detail");
          table.addCell("Unit Price");
          table.addCell("Quantity");
          table.addCell("Total Price");
              for(int aw = 0; aw < data.length; aw++){
                  table.addCell(data[aw]+"");
              }
              document.add(table);
              document.add(p4);
              document.add(p5);
           // writer.close();
            document.close();
sendIn2printer(invoice);
            } catch (FileNotFoundException e) {
               // TODO Auto-generated catch block
e.printStackTrace();
            } catch (DocumentException e) {
               // TODO Auto-generated catch block
e.printStackTrace();
            }
   }
   public static void makePdf2(Object[] data,long total)
   {
      String sale="_sale_.pdf";
      Document document = new Document();

            PdfWriter writer;

            try {
               writer = PdfWriter.getInstance(document, new FileOutputStream(sale));


            document.open();
            Font f1 = new Font(Font.FontFamily.UNDEFINED, 18, Font.BOLD);
           Paragraph p1= new Paragraph("CADDEY STORE",f1);

           Paragraph p2= new Paragraph("Main Market Gulberg II Lahore");
           Paragraph p3= new Paragraph("042-35712296\n\n\n");
           Paragraph p4= new Paragraph("\n\nGrand Total: "+total,f1);

            p1.setAlignment(Element.ALIGN_CENTER);
            p3.setAlignment(Element.ALIGN_CENTER);
            p2.setAlignment(Element.ALIGN_CENTER);
            document.add(p1);
            document.add(p2);
            document.add(p3);

          PdfPTable table = new PdfPTable(4);
          table.addCell("Date");
          table.addCell("Product ID");
          table.addCell("Company");
          table.addCell("Sale");
             for(int aw = 0; aw < data.length; aw++){
                  table.addCell(data[aw]+"");
              }
              document.add(table);
              document.add(p4);

           // writer.close();
            document.close();
sendIn2printer(sale);
            } catch (FileNotFoundException e) {
               // TODO Auto-generated catch block
e.printStackTrace();
            } catch (DocumentException e) {
               // TODO Auto-generated catch block
e.printStackTrace();
            }
   }

   public static void sendIn2printer(String file)
   { //The desktop api can help calling other applications in our machine
       //and also many other features...
       Desktop desktop = Desktop.getDesktop();
       try {
       //desktop.print(new File("DocXfile.docx"));
           desktop.print(new File(file));
       } catch (IOException e) {           
           e.printStackTrace();
       }}
   public static void main(String[] args) {
      // TODO Auto-generated method stub

}

}
Sale.java
import javax.swing.JPanel;
import javax.swing.JTable;
import javax.swing.JRadioButton;
import javax.swing.JScrollPane;
import javax.swing.JButton;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;

import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;

public class Sale extends JPanel {
   private JTable sale;
   private JTextField date;
   JComboBox<String> comp ;
   String com,dt;
   static DefaultTableModel dtm;
   ArrayList<String> print=new ArrayList<String>();
/**
    * Create the panel.
    */
public Sale() {
      setLayout(null);

      String [] header={"Date","Product ID","Company","Sale"};
dtm= new DefaultTableModel(header, 0);  
      sale = new JTable(dtm);
      sale.setBounds(244, 69, 494, 379);
      add(sale);
      JScrollPane s=new JScrollPane(sale);
      s.setBounds(244, 69, 494, 379);
      add(s);

      JButton btnPrint = new JButton("PRINT");
      btnPrint.addActionListener(new ActionListener() {
         public void actionPerformed(ActionEvent e) {

            Object data[]=new Object[dtm.getColumnCount()*dtm.getRowCount()];
            int x=0;
            long total=0;
            for(int row=0;row<dtm.getRowCount();row++)
            {
               for(int col=0;col<dtm.getColumnCount();col++)
               {
                  data[x]=sale.getValueAt(row, col);
                  if(col==3)
{total+=Long.parseLong((String) data[x]);}
                  x++;
               }
            }
            pdfGenerator.makePdf2(data,total);
         }
      });
      btnPrint.setBounds(244, 472, 118, 46);
      add(btnPrint);

      JRadioButton ds = new JRadioButton("Daily Sale");
      ds.setFont(new Font("Tahoma", Font.PLAIN, 18));
      ds.setBounds(62, 69, 109, 23);
      add(ds);
      ds.setSelected(true);

      JRadioButton ms = new JRadioButton("Monthly Sale");
      ms.setFont(new Font("Tahoma", Font.PLAIN, 18));
      ms.setBounds(62, 112, 144, 23);
      add(ms);

      JLabel lblDate = new JLabel("Date");
      lblDate.setFont(new Font("Tahoma", Font.PLAIN, 18));
      lblDate.setBounds(62, 178, 75, 14);
      add(lblDate);

      date = new JTextField();
      date.setBounds(62, 199, 86, 20);
      add(date);
      date.setColumns(10);

      JLabel lblMm = new JLabel("yyyy/mm/dd");
      lblMm.setBounds(149, 202, 85, 14);
      add(lblMm);

      JButton btnLoad = new JButton("LOAD");
      btnLoad.addActionListener(new ActionListener() {
         public void actionPerformed(ActionEvent e) {
            dt=date.getText().trim();
            com=comp.getSelectedItem().toString();
            if(ds.isSelected())
dailySale(dt,com);
            else
monthlySale(dt,com);
         }
      });
      btnLoad.setBounds(62, 328, 89, 23);
      add(btnLoad);

      JLabel lblCompany = new JLabel("Company");
      lblCompany.setFont(new Font("Tahoma", Font.PLAIN, 18));
      lblCompany.setBounds(62, 230, 109, 27);
      add(lblCompany);

      comp = new JComboBox<String>();
      comp.setBounds(62, 261, 86, 20);
      add(comp);
      comp.addItem("All");
      comp.addItem("General");
      comp.addItem("Mats & Rugs");
      comp.addItem("N/S & Electric");



      ms.addActionListener(new ActionListener() {

         @Override
         public void actionPerformed(ActionEvent arg0) {
            // TODO Auto-generated method stub
ds.setSelected(false);
         }
      });
      ds.addActionListener(new ActionListener() {

         @Override
         public void actionPerformed(ActionEvent e) {
      // TODO Auto-generated method stub
ms.setSelected(false);
         }
      });
   }

   public static void dailySale(String dt,String com)
   {
      ArrayList<String> sl=new ArrayList<String>();
      sl=DB.getSale(dt, com);
      String x1,x2,x3,x4;
dtm.setRowCount(0);
      int sz=sl.size()/4;
      for(int x=0;x<sz;x++)
      {
         x1=sl.get(0);sl.remove(0);
         x2=sl.get(0);sl.remove(0);
         x3=sl.get(0);sl.remove(0);
         x4=sl.get(0);sl.remove(0);

dtm.addRow(new Object[]{x1,x2,x3,x4});
      }
   }
   public static void monthlySale(String dt,String com)
   {
      String date[]=dt.split("/");
      String s[]={"","01","02","03","04","05","06","07","08","09","10","11","12","13","14","15","16","17","18","19","20","21","22","23","24","25","26","27","28","29","30","31"};
      ArrayList<String> sl=new ArrayList<String>();
      String ndt;
dtm.setRowCount(0);
      for(int x=1;x<=31;x++)
      {
         ndt=date[0]+"/"+date[1]+"/"+s[x].trim();
         sl=DB.getSale(ndt, com);
         String x1,x2,x3,x4;

         int sz=sl.size()/4;
         for(int i=0;i<sz;i++)
         {
            x1=sl.get(0);sl.remove(0);
            x2=sl.get(0);sl.remove(0);
            x3=sl.get(0);sl.remove(0);
            x4=sl.get(0);sl.remove(0);

dtm.addRow(new Object[]{x1,x2,x3,x4});
         }
      }



   }
}
searchProduct.java
import java.awt.Font;

import javax.swing.JButton;
import javax.swing.JLabel;

import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import java.awt.Color;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;

public class searchProduct extends JPanel {

   JTextField idField;
   JButton btnSearch;
   private JLabel error;
   String id,err="Enter product id!";
/**
    * Create the panel.
    */
public searchProduct() {
      setLayout(null);
      setBounds(100, 100, 840, 619);
      JLabel lblSearchProduct = new JLabel("SEARCH PRODUCT");
      lblSearchProduct.setBounds(319, 84, 182, 21);
      lblSearchProduct.setFont(new Font("Tahoma", Font.PLAIN, 17));
      add(lblSearchProduct);

      JLabel lblProductName = new JLabel("Product ID");
      lblProductName.setFont(new Font("Tahoma", Font.PLAIN, 14));
      lblProductName.setBounds(253, 156, 124, 21);
      add(lblProductName);

      idField = new JTextField();
      idField.setBounds(449, 158, 136, 20);
      add(idField);
      idField.setColumns(10);

      btnSearch = new JButton("Search");
      btnSearch.addActionListener(new ActionListener() {
         public void actionPerformed(ActionEvent e) {

            if(idField.getText().equals(""))
            {
               error.setText(err);
            }
            else
            {
               error.setText("");
               id=idField.getText().trim();
               DB.searchProduct(id);
               idField.setText("");
            }
         }
      });
      btnSearch.setBounds(449, 219, 136, 23);
      add(btnSearch);

      error = new JLabel("");
      error.setForeground(Color.RED);
      error.setBounds(349, 277, 217, 14);
      add(error);

   }

}
showStock.java
import java.awt.Font;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;

import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.JPasswordField;
import javax.swing.JTable;
import javax.swing.JComboBox;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import java.awt.Color;

public class showStock extends JPanel {
   private JTable stockTable;
   JComboBox<String> comp;
   DefaultTableModel model;
/**
    * Create the panel.
    */
public showStock() {
      setLayout(null);
      setBounds(100, 100, 840, 619);
      JLabel lblStock = new JLabel("AVAILABLE STOCK");
      lblStock.setBounds(328, 26, 182, 21);
      lblStock.setFont(new Font("Tahoma", Font.PLAIN, 17));
      add(lblStock);

      model = new DefaultTableModel(); 
      stockTable = new JTable(model);
      stockTable.setBounds(98, 112, 645, 397);
      add(stockTable);
      model.addColumn("Product ID");
      model.addColumn("Product Detail");
      model.addColumn("Company");
      model.addColumn("Quantity");
      JScrollPane scroll = new JScrollPane(stockTable);
      scroll.setBounds(98, 112, 645, 397);
      add(scroll);

      comp = new JComboBox<String>();
      comp.setBackground(Color.WHITE);
      comp.setBounds(583, 81, 160, 20);
      add(comp);
      comp.addItem("All");
      comp.addItem("General");
      comp.addItem("Mats & Rugs");
      comp.addItem("N/S & Electric");
      comp.addItemListener(new ItemListener() {

         @Override
         public void itemStateChanged(ItemEvent arg0) {
            // TODO Auto-generated method stub
updateTable();
         }
      });

      JLabel lblCompany = new JLabel("Company");
      lblCompany.setBounds(582, 68, 161, 14);
      add(lblCompany);

      JButton btnExportToExcel = new JButton("Export to Excel");
      btnExportToExcel.addActionListener(new ActionListener() {
         public void actionPerformed(ActionEvent arg0) {
            toExcel(stockTable, new File("availableStock.xls"));
            JOptionPane.showMessageDialog(null, "Export file created");
         }
      });
      btnExportToExcel.setBounds(605, 525, 138, 23);
      add(btnExportToExcel);

      JButton btnRefresh = new JButton("Refresh");
      btnRefresh.addActionListener(new ActionListener() {
         public void actionPerformed(ActionEvent arg0) {
            updateTable();
         }
      });
      btnRefresh.setBounds(457, 525, 138, 23);
      add(btnRefresh);
      updateTable();

   }

   public void updateTable()
   {
      model.setRowCount(0);
      ArrayList<String> stock=new ArrayList<String>();
      stock=DB.showStock(comp.getSelectedItem().toString());
      for(int x=0;x<stock.size();x+=4)
      {
         model.addRow(new Object[]{stock.get(x),stock.get(x+1),stock.get(x+2),stock.get(x+3)});
      }
   }


      public void toExcel(JTable table, File file){
          try{
              TableModel model = table.getModel();
              FileWriter excel = new FileWriter(file);

              for(int i = 0; i < model.getColumnCount(); i++){
                  excel.write(model.getColumnName(i) + "\t");
              }

              excel.write("\n");

              for(int i=0; i< model.getRowCount(); i++) {
                  for(int j=0; j < model.getColumnCount(); j++) {
                      excel.write(model.getValueAt(i,j).toString()+"\t");
                  }
                  excel.write("\n");
              }

              excel.close();

          }catch(IOException e){ JOptionPane.showMessageDialog(null, e); }
      }
}
updateProduct.java
import java.awt.Font;

import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.JComboBox;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.util.ArrayList;
import java.awt.event.ActionEvent;
import java.awt.Color;

public class updateProduct extends JPanel {

   JTextField idField;
   JTextArea descField;
   JButton btnUpdateProduct;
   JComboBox<String> company;
   private JTextField quanField;
   JLabel error ;
   String id,detail,comp;
   int quan;
   String err="Enter product id and quantity";
/**
    * Create the panel.
    */
public updateProduct() {
      setLayout(null);
      setBounds(100, 100, 840, 619);
      JLabel lblUpdateProduct = new JLabel("UPDATE PRODUCT");
      lblUpdateProduct.setBounds(328, 45, 182, 21);
      lblUpdateProduct.setFont(new Font("Tahoma", Font.PLAIN, 17));
      add(lblUpdateProduct);

      JLabel lblProductName = new JLabel("Product ID");
      lblProductName.setFont(new Font("Tahoma", Font.PLAIN, 14));
      lblProductName.setBounds(246, 136, 124, 21);
      add(lblProductName);

      JLabel lblProductDescription = new JLabel("Product detail\r\n");
      lblProductDescription.setFont(new Font("Tahoma", Font.PLAIN, 14));
lblProductDescription.setBounds(246, 168, 139, 21);
      add(lblProductDescription);

      idField = new JTextField();
      idField.setBounds(449, 137, 136, 20);
      add(idField);
      idField.setColumns(10);

      descField = new JTextArea();
      descField.setBounds(449, 168, 136, 58);
      add(descField);
      JScrollPane scroll = new JScrollPane(descField);
      scroll.setBounds(449, 168, 136, 58);
      add(scroll);

      JLabel lblCompany = new JLabel("Company");
      lblCompany.setFont(new Font("Tahoma", Font.PLAIN, 14));
      lblCompany.setBounds(246, 241, 124, 21);
      add(lblCompany);
      idField.addKeyListener(new KeyListener() {

         @Override
         public void keyTyped(KeyEvent e) {
            // TODO Auto-generated method stub
id=idField.getText().trim()+e.getKeyChar();
            ArrayList<String> data=DB.searchP(id);
            if(data.size()==3)
               {
                  descField.setText(data.get(0));
                  quanField.setText(data.get(2));
                  switch(data.get(1))
                  {
                     case "General":company.setSelectedIndex(0);break;
                     case "Mats &Rugs":company.setSelectedIndex(1);break;
                     case "N/S & Electric":company.setSelectedIndex(2);break;
                  }
               }
         }

         @Override
         public void keyReleased(KeyEvent arg0) {
            // TODO Auto-generated method stub

}

         @Override
         public void keyPressed(KeyEvent arg0) {
            // TODO Auto-generated method stub

}
      });
      btnUpdateProduct = new JButton("Update Product");
      btnUpdateProduct.addActionListener(new ActionListener() {
         public void actionPerformed(ActionEvent arg0) {
            if(quanField.getText().equals("")||idField.getText().equals(""))
            {
               error.setText(err);
            }
            else
            {
               error.setText("");
               id=idField.getText().trim();
               quan=Integer.parseInt(quanField.getText().trim());
               detail=descField.getText().trim();
               comp=company.getSelectedItem().toString();
               DB.updateProductToDB(id, detail, comp, quan);
               idField.setText("");
               quanField.setText("");
               descField.setText("");
            }
         }
      });
      btnUpdateProduct.setBounds(449, 338, 136, 23);
      add(btnUpdateProduct);

      quanField = new JTextField();
      quanField.setColumns(10);
      quanField.setBounds(449, 278, 136, 20);
      add(quanField);

      JLabel lblQuantity = new JLabel("Items available");
      lblQuantity.setFont(new Font("Tahoma", Font.PLAIN, 14));
      lblQuantity.setBounds(246, 276, 124, 21);
      add(lblQuantity);

      company = new JComboBox<String>();
      company.setBounds(449, 243, 136, 20);
      add(company);

      error = new JLabel("");
      error.setForeground(Color.RED);
      error.setBounds(299, 95, 286, 14);
      add(error);
